package fr.sparna.rdf.toolkit.select;

import java.io.PrintWriter;
import java.util.List;

import org.openrdf.model.URI;
import org.openrdf.query.BindingSet;
import org.openrdf.query.TupleQueryResultHandler;
import org.openrdf.query.TupleQueryResultHandlerBase;
import org.openrdf.query.TupleQueryResultHandlerException;

/**
 * Generates a (very) simple HTML page displaying the results of a SELECT query.
 * 
 * <p/>This handler needs to know the original SPARQL string to display it in the report.
 * 
 * <p/>To generate a report containing the results of multiple queries, you can associate
 * multiple SimpleHTMLReportHandler to the same PrintWriter and set the includeHTLMHeaders flag
 * to false so that the header and footer of the page will not be generated by each handler. Use
 * the static methods printHeader and printFooter to add them to the page.
 * 
 * @author Thomas Francart
 *
 */
public class SimpleHTMLReportHandler extends TupleQueryResultHandlerBase implements TupleQueryResultHandler {

	protected PrintWriter writer;
	protected List<String> bindingNames;
	
	// we need the sparql here only to display it in the report
	protected String sparql;
	// id of the sparql query (typically name of the SPARQL file)
	protected String sparqlID;
	// Name of the SPARQL query to display
	protected String sparqlName;

	public SimpleHTMLReportHandler(PrintWriter writer, String sparql, String sparqlID, String sparqlName) {
		super();
		this.writer = writer;
		this.sparql = sparql;
		this.sparqlID = sparqlID;
		this.sparqlName = sparqlName;
	}
	
	public SimpleHTMLReportHandler(PrintWriter writer, String sparql, String sparqlID) {
		this(writer, sparql, sparqlID, sparqlID);
	}

	public static void printHeader(PrintWriter writer) {
		writer.println("<html>");
		writer.println("<head>");
		writer.println("  <title>Query Report</title>");
		// writer.println("  <link href=\"bootstrap.min.css\" rel=\"stylesheet\">");
		writer.println("  <link href=\"http://bootswatch.com/journal/bootstrap.min.css\" rel=\"stylesheet\">");
		writer.println("</head>");
		writer.println("<body><div class=\"container\">");
	}
	
	public static void printFooter(PrintWriter writer) {
		writer.println("</div>" +
				"<script src=\"http://code.jquery.com/jquery-1.9.1.min.js\"></script>"+ "\n" +
				"<script type=\"text/javascript\">"+ "\n" +
				"	$(document).ready(function () {"+ "\n" +
				"		$('.results table').before(function() {"+ "\n" +
				"			return '<div>(' + $('tbody tr', this).length + ' rows)</div>';"+ "\n" +
				"		});"+ "\n" +
				"   $('.container').before(function() {"+ "\n" +
				"		var html = '<div style=\"float:left; position:fixed; width:160px; margin: 5px 5px 5px 5px;\">';"+ "\n" +
				"   	html += '<ul class=\"nav nav-list\">';"+ "\n" +
				"		$('.container .bookmark').each(function() {"+ "\n" +
				"			html += '<li><a href=\"#'+this.id+'\"><i class=\"icon-arrow-right\"></i>'+$(this).attr('title')+'</a></li>';"+ "\n" +
				"		});"+ "\n" +
				"		html += '</ul></div>'"+ "\n" +
				"		return html;"+ "\n" +
				"	});"+ "\n" +
				"	});"+ "\n" +
				"</script>"+ "\n" +
				"</body>");
		writer.println("</html>");
	}
	
	@Override
	public void startQueryResult(List<String> bindingNames)
	throws TupleQueryResultHandlerException {	
		// keep binding names - because we need to make sure we process
		// them in the same order when processing query results
		this.bindingNames = bindingNames;
		
		writer.println("<a class=\"bookmark\" id=\""+this.sparqlID+"\" title=\""+this.sparqlName+"\"><h2>"+this.sparqlName+"</h2></a>");
		writer.println("  <pre class=\"pre-scrollable\">"+this.sparql.replaceAll("<", "&lt;").replaceAll(">", "&gt;")+"</pre>");
		writer.println("  <div class=\"results\">");
		writer.println("\t<table class=\"table table-striped table-condensed\">");
		writer.println("\t<thead><tr>");
		for (String aBindingName : bindingNames) {
			writer.println("\t<th>"+aBindingName+"</th>");
		}
		writer.println("\t</tr></thead>");
		writer.println("\t<tbody>");
	}


	@Override
	public void handleSolution(BindingSet bs)
	throws TupleQueryResultHandlerException {
		writer.println("\t<tr>");
		for (String aBindingName : this.bindingNames) {
			if(bs.getValue(aBindingName) != null) {
				if(bs.getValue(aBindingName) instanceof URI) {
					writer.println("\t<td><a href=\""+bs.getValue(aBindingName).stringValue()+"\">"+bs.getValue(aBindingName).stringValue()+"</a></td>");
				} else {
					writer.println("\t<td>"+bs.getValue(aBindingName).stringValue()+"</td>");
				}				
			} else {
				writer.println("\t<td>&nbsp;</td>");
			}
		}
		writer.println("\t</tr>");
	}
	
	@Override
	public void endQueryResult() throws TupleQueryResultHandlerException {
		writer.println("\t</tbody></table>");
		writer.println("</div>");
		writer.println("<br/><br />");
	}

}
